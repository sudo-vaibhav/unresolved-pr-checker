name: PR Unresolved Checker

on:
  schedule:
    - cron: "30 3 * * 1-5" # Runs every weekday at 3:30am
  workflow_dispatch: # Allows manual trigger
  # push:
  #   branches:
  #     - main
jobs:
  check-unresolved:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo (optional if you don't need to read files)
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - run: npm install axios
      - name: Find unresolved PR conversations
        id: find-conversations
        uses: actions/github-script@v7
        env:
          # Comma-separated repos in the form "owner/repo1, owner/repo2, ..."
          REPOS: ${{ secrets.REPOS }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        with:
          github-token: ${{ secrets.ORG_READ_TOKEN }}
          script: |
            // Access the "REPOS" env var, e.g. "org1/repoA, org2/repoB"
            const reposList = process.env.REPOS.split(",").map((r) => r.trim());

            // We'll accumulate all unresolved PRs from all repos here
            const allUnresolved = [];

            for (const repoFull of reposList) {
              const [owner, repo] = repoFull.split("/");
              if (!owner || !repo) {
                core.warning(`Invalid repository format: '${repoFull}'`);
                continue;
              }
              const resp = await github.graphql({
                query: `query FetchReviewComments($owner: String!, $repo: String!) {
                repository(owner: $owner, name: $repo) {

                  pullRequests(first: 30, states: OPEN) {
                    
                    edges {
                    
                    node {
                      author { 
                        login
                      }
                      title
                      url
                      reviewDecision
                      reviewThreads(first: 100) {
                        edges {
                          node {
                            isResolved
                            isOutdated
                            isCollapsed
                            comments(first: 100) {
                              totalCount
                              nodes {
                                author {
                                  login
                                }
                                body
                                url
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                  }
                }
              }`,
                owner,
                repo,
              });
              const pullRequests = resp.repository.pullRequests;
              for (const pr of pullRequests.edges) {
                const conversationThreads = pr.node.reviewThreads.edges.flatMap(
                  (edge) => edge.node
                );
                const unresolvedConversationThreads = conversationThreads.filter(
                  (thread) => !thread.isResolved
                );
                const lastUnresolvedComment = unresolvedConversationThreads
                  .at(-1)
                  ?.comments.nodes.at(-1);
                const lastCommenter = lastUnresolvedComment?.author.login;
                const lastCommentBody = lastUnresolvedComment?.body;
                if (lastCommenter && lastCommenter !== pr.node.author.login) {
                  allUnresolved.push({
                    repository: `${owner}/${repo}`,
                    pr_url: pr.node.url,
                    pr_author: pr.node.author.login,
                    body: lastCommentBody,
                    last_commenter: lastCommenter,
                  });
                }
              }
              const axios = require("axios");
             
            }
            const response = await axios.post(process.env.WEBHOOK_URL, allUnresolved);
            // Output the final array of unresolved PR data
            core.setOutput("unresolvedData", JSON.stringify(allUnresolved));
