name: PR Unresolved Checker

on:
  schedule:
    - cron: "0 9 * * 1-5" # Runs every weekday at 9am
  workflow_dispatch: # Allows manual trigger
  push:
    branches:
      - main
jobs:
  check-unresolved:
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo (optional if you don't need to read files)
        uses: actions/checkout@v4

      - name: Set up Node
        uses: actions/setup-node@v3
        with:
          node-version: "20"
      - run: npm install axios
      - name: Find unresolved PR conversations
        id: find-conversations
        uses: actions/github-script@v7
        env:
          # Comma-separated repos in the form "owner/repo1, owner/repo2, ..."
          REPOS: ${{ secrets.REPOS }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
        with:
          github-token: ${{ secrets.ORG_READ_TOKEN }}
          script: |
            // Access the "REPOS" env var, e.g. "org1/repoA, org2/repoB"
            const reposList = process.env.REPOS.split(",").map(r => r.trim());

            // We'll accumulate all unresolved PRs from all repos here
            const allUnresolved = [];

            for (const repoFull of reposList) {
            const [owner, repo] = repoFull.split("/");
            if (!owner || !repo) {
                core.warning(`Invalid repository format: '${repoFull}'`);
                continue;
            }

            // 1. List all open PRs
            const { data: prs } = await github.rest.pulls.list({
                owner,
                repo,
                state: "open",
                per_page: 100
            });

            // 2. For each PR, list review comments and check "last commenter"
            for (const pr of prs) {
                const { data: comments } = await github.rest.pulls.listReviewComments({
                owner,
                repo,
                pull_number: pr.number,
                per_page: 100
                });

                if (comments.length > 0) {
                // Check the last comment
                const lastComment = comments[comments.length - 1];
                // If the last comment is NOT from the PR author, we consider it "unresolved"
                if (lastComment.user.login !== pr.user.login) {
                    allUnresolved.push({
                    repository: `${owner}/${repo}`,
                    pr_number: pr.number,
                    pr_title: pr.title,
                    pr_author: pr.user.login,
                    last_commenter: lastComment.user.login,
                    });
                }
                }
            }
            }
            const axios = require('axios');
            const response = await axios.post(process.env.WEBHOOK_URL, allUnresolved);

            // Output the final array of unresolved PR data
            core.setOutput("unresolvedData", JSON.stringify(allUnresolved));

      # - name: Post data to webhook
      #   if: steps.find-conversations.outputs.unresolvedData != '[]'
      #   run: |
      #     echo "Posting unresolved PR data to webhook..."
      #     echo "Payload: ${{ steps.find-conversations.outputs.unresolvedData }}"

      #     curl -X POST \
      #         -H "Content-Type: application/json" \
      #         -d '${{ steps.find-conversations.outputs.unresolvedData }}' \
      #         ${{ secrets.WEBHOOK_URL }}
